name: CI

on: [pull_request]

jobs:
  test:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.12]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/Scripts/activate  # Activation spécifique à Windows
          pytest app/tests/

      # # Étape pour construire l'exécutable
      # - name: Build Windows Executable
      #   run: |
      #     source .venv/Scripts/activate  # Activer l'environnement virtuel
      #     pip install pyinstaller  # Installer PyInstaller
      #     pyinstaller  --onefile src/main_PELCA_GUI.py 

      # # Étape pour archiver l'exécutable
      # - name: Archive Executable
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     zip pelca.zip dist/main_PELCA_GUI.exe  # Archiver l'exécutable
