name: Build and release windows executable


on:
  push:
    branches:
      - main
      - new-v1.2.0
    # tags:
    #   - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.12]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: | 
            poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/Scripts/activate  # Activation spécifique à Windows
          pytest app/tests/

      - name: Update VERSION in main_window.py
        run: sed -i "s/^VERSION = \".*\"/VERSION = \"${GITHUB_REF##*/}\"/" app/main_window.py

      # Étape pour construire l'exécutable sous Windows
      - name: Build Windows Executable
        run: |
          source .venv/Scripts/activate
          pip install pyinstaller bw2io kaleido==0.1.0.post1 jaraco.text setuptools
          ls
            pyinstaller main.py --hidden-import=bw2io --distpath dist/PELCA --noconsole --name PELCA --icon=app/ressources/icons/icon.ico
            cp -r .venv/Lib/site-packages/bw2io dist/PELCA/PELCA/_internal/bw2io
            cp Example/exampleinput_PowermoduleAndCapacitor.xlsx dist/PELCA/PELCA/

      # Étape pour compresser l'exécutable sous Windows (PowerShell)
      - name: Archive Executable
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path dist/PELCA -DestinationPath pelca_${{ github.ref_name }}_app.zip
        shell: powershell

      # Étape pour publier une release GitHub et y attacher le fichier zip
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}  # Utiliser le tag réel
          release_name: Release ${{ github.ref }}  # Nom de la release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: pelca_${{ github.ref_name }}_app.zip
          asset_name: pelca_${{ github.ref_name }}_app.zip
          asset_content_type: application/zip

      # - name: Upload Build Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #       name: pelca_${{ github.ref_name }}_app.zip
      #       path: pelca_${{ github.ref_name }}_app.zip

